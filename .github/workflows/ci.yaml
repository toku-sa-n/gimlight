name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  disallow-binary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Check if a file is a binary
        run: |
          binaries=$(git ls-files -z|xargs --null -I {} sh -c '[ ! -d "{}" ] && file --dereference --mime {}'|grep 'charset=binary'|cut -d: -f1)
          if [ -n "$binaries" ]; then
            echo "Do not commit the following binary files as git does not handle them well"
            echo "$binaries"
            exit 1
          fi

  lint_docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - uses: ocaml/setup-ocaml@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9
        with:
          ocaml-compiler: "4.14.1"
          dune-cache: true

      - name: Install Coq
        run: |
          sudo apt update
          sudo apt install coq

      - uses: ocaml/setup-ocaml/lint-doc@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9

  markdown-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Run `markdown-lint`
        uses: DavidAnson/markdownlint-cli2-action@b4c9feab76d8025d1e83c653fa3990936df0e6c8 # v16.0.0

  ocamlformat:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - uses: ocaml/setup-ocaml@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9
        with:
          ocaml-compiler: "4.14.1"
          dune-cache: true

      - name: Install Coq
        run: |
          sudo apt update
          sudo apt install coq

      - uses: ocaml/setup-ocaml/lint-fmt@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9

  opamlint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - uses: ocaml/setup-ocaml@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9
        with:
          ocaml-compiler: "4.14.1"
          dune-cache: true

      - uses: ocaml/setup-ocaml/lint-opam@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9

  prettier:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Run `prettier` with the check mode
        run: npx --yes prettier --check .

  test:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libsdl2-dev libglew-dev

      # See https://github.com/ocaml-opam/opam-repository-mingw#updates for `opam-repositories`.
      - uses: ocaml/setup-ocaml@8ea37830f3b2c9f54178d255808ae377b5758062 # v2.2.9
        with:
          ocaml-compiler: "4.14.1"
          opam-repositories: |
            opam-repository-mingw: https://github.com/ocaml-opam/opam-repository-mingw.git#sunset
            default: https://github.com/ocaml/opam-repository.git
          dune-cache: true

      - name: Install dependencies
        run: opam install --deps-only --with-test .

      # Without `opam exec -- `, these commands will fail due to "dune not found"
      # error.
      - name: Build
        run: opam exec -- dune build

      - name: Run tests with dune
        run: opam exec -- dune test

  trailing-newline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      # Do not try to merge two `xargs` like this because it will fail with submodules as the last `||` catches cases where the first two test commands fail.
      #
      # ```bash
      # git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && tail -c 1 {} | read -r _ || (echo "{}"; false)'
      # ```
      - name: List all non-empty files tracked by git that do not end with a newline
        run: git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && echo {}' | xargs -I {} sh -c 'tail -c 1 {} | read -r _ || (echo "{}"; false)'

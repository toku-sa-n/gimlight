name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  build-hie:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Install the Haskell environment
        uses: haskell-actions/setup@ca7ecf7b0c7a4300227b1ab05cda52bf019c174b # v2.0.0
        with:
          enable-stack: true
        id: haskell-setup

      - name: Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            .hie
            .stack-root
            ${{ steps.haskell-setup.outputs.stack-root }}
          key: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**/*.hs') }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}
            ${{ github.job }}-${{ runner.os }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libsdl2-dev libglew-dev

      # See https://github.com/ocaml-opam/opam-repository-mingw#updates for `opam-repositories`.
      - name: Install OCaml
        uses: ocaml/setup-ocaml@2771e408a16f7fedf3b342f0676646dc463bd606 # v2.2.7
        with:
          ocaml-compiler: "4.14.1"
          opam-repositories: |
            opam-repository-mingw: https://github.com/ocaml-opam/opam-repository-mingw.git#sunset
            default: https://github.com/ocaml/opam-repository.git
          dune-cache: true

      - name: Install Coq
        run: opam install --yes coq

      - name: Record the path to GHC
        run: echo "GHC_PATH=$(stack path --compiler-exe)" >> $GITHUB_OUTPUT
        id: record-ghc-path

      - name: Build the project with HIE
        run: eval $(opam env) && stack build --ghc-options -fwrite-ide-info --ghc-options -hiedir=.hie

      - name: Upload the HIE files
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
        with:
          name: hie
          path: .hie

  disallow-binary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Check if a file is a binary
        run: |
          binaries=$(git ls-files -z|xargs --null -I {} sh -c '[ ! -d "{}" ] && file --dereference --mime {}'|grep 'charset=binary'|cut -d: -f1)
          if [ -n "$binaries" ]; then
            echo "Do not commit the following binary files as git does not handle them well"
            echo "$binaries"
            exit 1
          fi

  hlint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Install `hlint`
        uses: haskell-actions/hlint-setup@0b0024319753ba0c8b2fa21b7018ed252aed8181 # v2.4.9

      - name: Run `hlint`
        uses: haskell-actions/hlint-run@96199a3357287063c67606b26d533f1acb4b6c4e # v2.4.9
        with:
          path: '["app/", "logic/", "test", "Setup.hs"]'
          fail-on: status

  markdown-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Run `markdown-lint`
        uses: DavidAnson/markdownlint-cli2-action@b4c9feab76d8025d1e83c653fa3990936df0e6c8 # v16.0.0

  prettier:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Run `prettier` with the check mode
        run: npx --yes prettier --check .

  stan:
    runs-on: ubuntu-latest

    needs: build-hie

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Install the Haskell environment
        uses: haskell-actions/setup@ca7ecf7b0c7a4300227b1ab05cda52bf019c174b # v2.0.0
        id: haskell-setup

      - name: Record the path to GHC
        run: echo "GHC_PATH=$(stack path --compiler-exe)" >> $GITHUB_OUTPUT
        id: record-ghc-path

      - name: Install Stan
        uses: ./.github/workflows/cabal-install
        with:
          name: stan
          version: 0.1.2.1
          ghc-path: ${{ steps.record-ghc-path.outputs.GHC_PATH }}

      - name: Download HIE
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d # v4.1.5
        with:
          name: hie
          path: .hie

      - name: Run `stan`
        run: |
          stan check --exclude --filter-all --scope-all \
               check --include --filter-all --directory=app \
               check --include --filter-all --directory=src \
               check --include --filter-all --directory=test
  # Re-run this job if it fails with code -1073740940 on Windows.
  #
  # FIXME: Resolve this occasional problem.
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Install dependencies
        id: haskell-setup
        uses: haskell-actions/setup@ca7ecf7b0c7a4300227b1ab05cda52bf019c174b # v2.0.0
        with:
          enable-stack: true

      - name: Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            .stack-root
            ${{ steps.haskell-setup.outputs.stack-root }}
          key: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**/*.hs') }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}
            ${{ github.job }}-${{ runner.os }}

      - name: Install dependencies (Windows)
        # See https://github.com/haskell-game/sdl2/issues/277#issuecomment-1784282404 for why we download older SDL2.
        # See https://github.com/msys2/MINGW-packages/issues/11731 for the update commands.
        # Install `msys2-keyring` first to avoid the untrusted error.
        run: |
          stack exec -- pacman -Syyu --noconfirm
          stack exec -- pacman -S --noconfirm `
          msys2-keyring `
          mingw-w64-x86_64-gmp `
          mingw-w64-x86_64-pkg-config `
          mingw-w64-x86_64-freeglut `
          mingw-w64-x86_64-glew `
          mingw-w64-x86_64-freetype
          stack exec -- curl -O  https://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-SDL2-2.24.1-1-any.pkg.tar.zst
          stack exec -- pacman -U mingw-w64-x86_64-SDL2-2.24.1-1-any.pkg.tar.zst --noconfirm
        if: runner.os == 'Windows'

      - name: Install dependencies (macOS)
        run: brew install sdl2 glew
        if: runner.os == 'macOS'

      - name: Install dependencies (Linux)
        run: |
          sudo apt update
          sudo apt install libsdl2-dev libglew-dev
        if: runner.os == 'Linux'

      # See https://github.com/ocaml-opam/opam-repository-mingw#updates for `opam-repositories`.
      - name: Install OCaml
        uses: ocaml/setup-ocaml@2771e408a16f7fedf3b342f0676646dc463bd606 # v2.2.7
        with:
          ocaml-compiler: "4.14.1"
          opam-repositories: |
            opam-repository-mingw: https://github.com/ocaml-opam/opam-repository-mingw.git#sunset
            default: https://github.com/ocaml/opam-repository.git
          dune-cache: true

      - name: Install Coq
        run: opam install --yes coq.8.19.0

      - name: Build
        run: eval $(opam env) && stack build

      # This is for `.cabal` files and Haskell files generated by Coq.
      - name: Ensure all generated files are up-to-date
        run: git diff --exit-code

      - name: Run tests
        run: eval $(opam env) && stack test

  trailing-newline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      # Do not try to merge two `xargs` like this because it will fail with submodules as the last `||` catches cases where the first two test commands fail.
      #
      # ```bash
      # git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && tail -c 1 {} | read -r _ || (echo "{}"; false)'
      # ```
      - name: List all non-empty files tracked by git that do not end with a newline
        run: git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && echo {}' | xargs -I {} sh -c 'tail -c 1 {} | read -r _ || (echo "{}"; false)'

  weeder:
    runs-on: ubuntu-latest

    needs: build-hie

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Install the Haskell environment
        uses: haskell-actions/setup@ca7ecf7b0c7a4300227b1ab05cda52bf019c174b # v2.0.0
        id: haskell-setup

      - name: Record the path to GHC
        run: echo "GHC_PATH=$(stack path --compiler-exe)" >> $GITHUB_OUTPUT
        id: record-ghc-path

      - name: Install `weeder`
        uses: ./.github/workflows/cabal-install
        with:
          name: weeder
          version: 2.4.0
          ghc-path: ${{ steps.record-ghc-path.outputs.GHC_PATH }}

      - name: Download HIE
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d # v4.1.5
        with:
          name: hie
          path: .hie

      - name: Run `weeder`
        run: weeder

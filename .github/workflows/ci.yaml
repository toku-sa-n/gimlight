name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  build-hie:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install the Haskell environment
        uses: haskell-actions/setup@64aa5146ed5bd91f181552b8b5fbe50fbd2bd3fe # v2.7.1
        with:
          enable-stack: true
        id: haskell-setup

      - name: Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            .hie
            .stack-root
            ${{ steps.haskell-setup.outputs.stack-root }}
          key: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**/*.hs') }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}
            ${{ github.job }}-${{ runner.os }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libsdl2-dev libglew-dev coq

      - name: Record the path to GHC
        run: echo "GHC_PATH=$(stack path --compiler-exe)" >> $GITHUB_OUTPUT
        id: record-ghc-path

      - name: Build the project with HIE
        run: stack build --ghc-options -fwrite-ide-info --ghc-options -hiedir=.hie

      - name: Upload the HIE files
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: hie
          path: .hie

  disallow-binary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Check if a file is a binary
        run: |
          binaries=$(git ls-files -z|xargs --null -I {} sh -c '[ ! -d "{}" ] && file --dereference --mime {}'|grep 'charset=binary'|cut -d: -f1)
          if [ -n "$binaries" ]; then
            echo "Do not commit the following binary files as git does not handle them well"
            echo "$binaries"
            exit 1
          fi

  hlint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install `hlint`
        uses: haskell-actions/hlint-setup@fe9cd1cd1af94a23900c06738e73f6ddb092966a # v2.4.10

      - name: Run `hlint`
        uses: haskell-actions/hlint-run@96199a3357287063c67606b26d533f1acb4b6c4e # v2.4.9
        with:
          path: '["app/", "logic/", "test", "Setup.hs"]'
          fail-on: status

  markdown-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Run `markdown-lint`
        uses: DavidAnson/markdownlint-cli2-action@b4c9feab76d8025d1e83c653fa3990936df0e6c8 # v16.0.0

  prettier:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Run `prettier` with the check mode
        run: npx --yes prettier --check .

  stan:
    runs-on: ubuntu-latest

    needs: build-hie

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install the Haskell environment
        uses: haskell-actions/setup@64aa5146ed5bd91f181552b8b5fbe50fbd2bd3fe # v2.7.1
        id: haskell-setup

      - name: Record the path to GHC
        run: echo "GHC_PATH=$(stack path --compiler-exe)" >> $GITHUB_OUTPUT
        id: record-ghc-path

      - name: Install Stan
        uses: ./.github/workflows/cabal-install
        with:
          name: stan
          version: 0.1.2.1
          ghc-path: ${{ steps.record-ghc-path.outputs.GHC_PATH }}

      - name: Download HIE
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: hie
          path: .hie

      - name: Run `stan`
        run: |
          stan check --exclude --filter-all --scope-all \
               check --include --filter-all --directory=app \
               check --include --filter-all --directory=src \
               check --include --filter-all --directory=test

  # We do not run this job on Windows because Coq cannot be installed on it. See
  # #93.
  #
  # When you re-enable the Windows CI, Check the following links.
  # - https://github.com/haskell-game/sdl2/issues/277#issuecomment-1784282404
  #   for installing SDL2.
  # - https://github.com/msys2/MINGW-packages/issues/11731 for the `unknown
  #   trust` error.
  #
  # Re-run this job if you re-enable the Windows CI and it failed with code
  # -1073740940 on Windows.
  #
  # FIXME: Resolve this occasional problem.
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install dependencies
        id: haskell-setup
        uses: haskell-actions/setup@64aa5146ed5bd91f181552b8b5fbe50fbd2bd3fe # v2.7.1
        with:
          enable-stack: true

      - name: Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            .stack-root
            ${{ steps.haskell-setup.outputs.stack-root }}
          key: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('**/*.hs') }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}
            ${{ github.job }}-${{ runner.os }}-${{ hashFiles('package.yaml') }}
            ${{ github.job }}-${{ runner.os }}

      - name: Install dependencies (macOS)
        run: brew install sdl2 glew coq
        if: runner.os == 'macOS'

      - name: Install dependencies (Linux)
        run: |
          sudo apt update
          sudo apt install libsdl2-dev libglew-dev coq
        if: runner.os == 'Linux'

      - name: Build
        run: stack build

      # This is for `.cabal` files and Haskell files generated by Coq.
      - name: Ensure all generated files are up-to-date
        run: git diff --exit-code

      - name: Run tests
        run: stack test

  trailing-newline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      # Do not try to merge two `xargs` like this because it will fail with submodules as the last `||` catches cases where the first two test commands fail.
      #
      # ```bash
      # git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && tail -c 1 {} | read -r _ || (echo "{}"; false)'
      # ```
      - name: List all non-empty files tracked by git that do not end with a newline
        run: git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && echo {}' | xargs -I {} sh -c 'tail -c 1 {} | read -r _ || (echo "{}"; false)'

  weeder:
    runs-on: ubuntu-latest

    needs: build-hie

    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install the Haskell environment
        uses: haskell-actions/setup@64aa5146ed5bd91f181552b8b5fbe50fbd2bd3fe # v2.7.1
        id: haskell-setup

      - name: Record the path to GHC
        run: echo "GHC_PATH=$(stack path --compiler-exe)" >> $GITHUB_OUTPUT
        id: record-ghc-path

      - name: Install `weeder`
        uses: ./.github/workflows/cabal-install
        with:
          name: weeder
          version: 2.4.0
          ghc-path: ${{ steps.record-ghc-path.outputs.GHC_PATH }}

      - name: Download HIE
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: hie
          path: .hie

      - name: Run `weeder`
        run: weeder

name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  disallow-binary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Check if a file is a binary
        run: |
          binaries=$(git ls-files -z|xargs --null -I {} sh -c '[ ! -d "{}" ] && file --dereference --mime {}'|grep 'charset=binary'|cut -d: -f1)
          if [ -n "$binaries" ]; then
            echo "Do not commit the following binary files as git does not handle them well"
            echo "$binaries"
            exit 1
          fi

  lint_docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ocaml/setup-ocaml@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3
        with:
          ocaml-compiler: "4.14.1"
          dune-cache: true

      - name: Install Coq
        run: opam install coq

      - uses: ocaml/setup-ocaml/lint-doc@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3

  markdown-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run `markdown-lint`
        uses: DavidAnson/markdownlint-cli2-action@eb5ca3ab411449c66620fe7f1b3c9e10547144b0 # v18.0.0

  ocamlformat:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ocaml/setup-ocaml@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3
        with:
          ocaml-compiler: "4.14.1"
          dune-cache: true

      - name: Install Coq
        run: |
          sudo apt update
          sudo apt install coq

      - uses: ocaml/setup-ocaml/lint-fmt@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3

  opamlint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ocaml/setup-ocaml@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3
        with:
          ocaml-compiler: "4.14.1"
          dune-cache: true

      - uses: ocaml/setup-ocaml/lint-opam@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3

  prettier:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run `prettier` with the check mode
        run: npx --yes prettier --check .

  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # See https://github.com/ocaml-opam/opam-repository-mingw#updates for `opam-repositories`.
      - uses: ocaml/setup-ocaml@9c8cce06c9452f19c2248eafe9ac751898ded94a # v3.1.3
        with:
          ocaml-compiler: "4.14.1"
          opam-repositories: |
            opam-repository-mingw: https://github.com/ocaml-opam/opam-repository-mingw.git#sunset
            default: https://github.com/ocaml/opam-repository.git
          dune-cache: true

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libsdl2-dev libglew-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install sdl2 glew

      - name: Install Coq
        run: opam install coq

      - name: Install package dependencies
        run: opam install --deps-only --with-test .

      - name: Build
        run: opam exec -- dune build

      - name: Run tests with dune
        run: opam exec -- dune test

  trailing-newline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: List all non-empty files tracked by git that do not end with a newline
        run: git ls-files | xargs -I {} sh -c '[ ! -d "{}" ] && [ -s "{}" ] && echo {}' | xargs -I {} sh -c 'tail -c 1 {} | read -r _ || (echo "{}"; false)'
